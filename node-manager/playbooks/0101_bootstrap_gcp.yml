---

- name: Boostrap MockFog2 Infrastructure on GCP
  hosts: localhost

  vars:
    app_ports: "{{ application_instruction_and_states_ports }}"
    app_ports_string_list: "{{ app_ports | map('string') | list }}"

  tasks:
    - name: Create Management Network
      google.cloud.gcp_compute_network:
        name: mf2-network-management
        auto_create_subnetworks: 'false'
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      register: mf2_network_management

    - name: Create Management Subnet
      google.cloud.gcp_compute_subnetwork:
        name: mf2-subnet-management
        region: "{{ region }}"
        network: "{{ mf2_network_management }}"
        ip_cidr_range: 10.0.1.0/24
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      register: mf2_subnet_management

    - name: Create Management Firewall
      google.cloud.gcp_compute_firewall:
        name: mf2-firewall-management
        network: "{{ mf2_network_management }}"
        allowed:
        - ip_protocol: tcp
          ports:
          - "22"
          - "{{ agent_port | string }}"
          - "8080"
        - ip_protocol: icmp
        source_ranges:
          - 0.0.0.0/0
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      # with_items: "{{ app_ports_string_list }}"

    - name: Create Internal Network
      google.cloud.gcp_compute_network:
        name: mf2-network-internal
        auto_create_subnetworks: 'false'
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      register: mf2_network_internal

    - name: Create Internal Subnet
      google.cloud.gcp_compute_subnetwork:
        name: mf2-subnet-internal
        region: "{{ region }}"
        network: "{{ mf2_network_internal }}"
        ip_cidr_range: 10.0.2.0/24
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      register: mf2_subnet_internal

    - name: Create Internal Firewall
      google.cloud.gcp_compute_firewall:
        name: mf2-firewall-internal
        network: "{{ mf2_network_internal }}"
        allowed:
        - ip_protocol: tcp
        - ip_protocol: icmp
        source_ranges:
          - 10.0.2.0/24
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
        state: present

    - name: Create VM Instances
      google.cloud.gcp_compute_instance:
        name: "{{ item.machine_name }}"
        machine_type: "{{ item.type }}"
        disks:
        - auto_delete: 'true'
          boot: 'true'
          initialize_params:
            source_image: "{{ item.image }}"
        labels:
          environment: mf2
        network_interfaces:
        - network: "{{ mf2_network_management }}"
          access_configs:
          - name: External NAT
            type: ONE_TO_ONE_NAT
          subnetwork: "{{ mf2_subnet_management }}"
        - network: "{{ mf2_network_internal }}"
          access_configs:
          - name: External NAT
            type: ONE_TO_ONE_NAT
          subnetwork: "{{ mf2_subnet_internal }}"
        zone: "{{ zone }}"
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      with_items: "{{ machines }}"
      register: gcp_instances

    - name: Print GCP instances
      ansible.builtin.debug:
        msg: "{{ gcp_instances.results[0].networkInterfaces[0].accessConfigs[0].natIP }}"

    # Check how to create a vector of IPs from that dictionary
    # - name: Create a vector of network interfaces
    #   set_fact:
    #     network_interfaces: gcp_instances.results[0].networkInterfaces }}"

    # - name: Wait for the instances to be created
    #   wait_for: host={{ item.accessConfigs[0].natIP }} port=22 delay=10 timeout=60
    #   with_items: "{{ network_interfaces }}"

    - name: Collect instance metadata
      gcp_compute_instance_info:
        zone: "{{ zone }}"
        filters:
        project: "{{ project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_cred_file }}"
      register: gcp_instances # overwrite previous var

    # - name: Print GCP instances
    #   ansible.builtin.debug:
    #     msg: "{{ gcp_instances }}"

    - name: Write instance metadata to file
      local_action:
        module: copy 
        dest: "{{ playbook_dir }}/../run/machines/machine_meta.jsonc"
        content: "{{ gcp_instances }}"
        mode: "400"
